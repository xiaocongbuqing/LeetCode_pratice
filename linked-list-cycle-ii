/*
题目描述

Given a linked list, return the node where the cycle begins. If there is no cycle, returnnull.

Follow up:
Can you solve it without using extra space?
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
//采用快慢指针，记录下相遇点的指针位置，然后再把其中一个指针指向head，再以同样的速度走，下一次相遇的点就是要找的环开始的地方
    ListNode *detectCycle(ListNode *head) {
    //首先判断够不够快慢指针的一次循环
        if(head==NULL||head->next==NULL||head->next->next==NULL)return NULL;
        
        //提前做一次循环，因为循环条件为p1!=p2，所以，如果都初始化为head会直接跳出
        ListNode* p1=head->next,*p2=head->next->next;
        while(p1!=p2)
        {
            if(p1->next==NULL)return NULL;
            else p1=p1->next;
            if(p2->next==NULL)return NULL;
            else
            {
                if(p2->next->next==NULL)return NULL;
                else p2=p2->next->next;
            }
        }
        p1=head;
        while(p1!=p2)
        {
            p1=p1->next;
            p2=p2->next;
        }
        return p1;
    }
};
